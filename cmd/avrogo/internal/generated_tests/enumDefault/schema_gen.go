// Code generated by avrogen. DO NOT EDIT.

package enumDefault

import (
	"fmt"
	"github.com/heetch/avro/avrotypegen"
	"strconv"
)

type Foo int

const (
	FooA Foo = iota
	FooB
	FooC
)

var _Foo_strings = []string{
	"a",
	"b",
	"c",
}

// String returns the textual representation of Foo.
func (e Foo) String() string {
	if e < 0 || int(e) >= len(_Foo_strings) {
		return "Foo(" + strconv.FormatInt(int64(e), 10) + ")"
	}
	return _Foo_strings[e]
}

// MarshalText implements encoding.TextMarshaler
// by returning the textual representation of Foo.
func (e Foo) MarshalText() ([]byte, error) {
	if e < 0 || int(e) >= len(_Foo_strings) {
		return nil, errors.Newf("Foo value %d is out of bounds", e)
	}
	return []byte(_Foo_strings[e]), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
// by expecting the textual representation of Foo.
func (e *Foo) UnmarshalText(data []byte) error {
	// Note for future: this could be more efficient.
	for i, s := range _Foo_strings {
		if string(data) == s {
			*e = Foo(i)
			return nil
		}
	}
	return errors.Newf("unknown value %q for Foo", data)
}

type R struct {
	EnumField Foo `json:"enumField"`
}

// AvroRecord implements the avro.AvroRecord interface.
func (R) AvroRecord() avrotypegen.RecordInfo {
	return avrotypegen.RecordInfo{
		Schema: `{"fields":[{"default":"b","name":"enumField","type":{"name":"Foo","symbols":["a","b","c"],"type":"enum"}}],"name":"R","type":"record"}`,
		Defaults: []func() interface{}{
			0: func() interface{} {
				return FooB
			},
		},
	}
}
